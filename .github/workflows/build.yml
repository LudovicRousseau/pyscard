name: "ðŸ§ª Test"

permissions:
  contents: read
  pull-requests: write

# Controls when the action will run. Triggers the workflow on push or
# pull request events but only for the master branch
on: [push, pull_request]

jobs:
  test:
    name: "${{ matrix.name }} / ${{ matrix.cpython }}"
    runs-on: "${{ matrix.runner }}"
    defaults:
      run:
        shell: "bash"

    strategy:
      fail-fast: false
      matrix:
        name:
          - "Linux"
          - "macOS"
          - "Windows (x64)"
          - "Windows (x86)"
          - "Windows (arm64)"

        cpython:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

        include:
          # Augment the matrix with additional values.
          # The values match on "name".
          - name: "Linux"
            runner: "ubuntu-latest"
            architecture: "x64"

          - name: "macOS"
            runner: "macos-latest"
            architecture: "arm64"

          - name: "Windows (x64)"
            runner: "windows-latest"
            architecture: "x64"

          - name: "Windows (x86)"
            runner: "windows-latest"
            architecture: "x86"

          - name: "Windows (arm64)"
            runner: "windows-11-arm"
            architecture: "arm64"

        exclude:
          - name: "Windows (arm64)"
            cpython: "3.10"

    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v5

      - name: "Set up Python ${{ matrix.cpython }}"
        uses: actions/setup-python@v6
        with:
          python-version: "${{ matrix.cpython }}"
          architecture: "${{ matrix.architecture }}"
          allow-prereleases: true

      - name: "Install build prerequisites (Linux)"
        if: matrix.name == 'Linux'
        run: |
          sudo apt install libpcsclite-dev python3-all-dev python3-setuptools swig

      - name: "Install build prerequisites (macOS)"
        if: matrix.name == 'macOS'
        run: |
          brew install swig

      - name: "Install build prerequisites (Windows)"
        if: startsWith(matrix.name, 'Windows')
        run: |
          choco upgrade swig --allow-empty-checksums --yes --limit-output
          swig -version

      - name: "Determine virtual environment bin path"
        shell: "bash"
        run: |
          echo 'venv-path=temp/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}' >> "$GITHUB_ENV"

      - name: "Create a virtual environment"
        run: |
          python -m venv temp
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Test"
        run: |
          ${{ env.venv-path }}/tox -e py${{ matrix.cpython }},coverage_report-ci

      - name: "Coveralls"
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build"
        run: |
          ${{ env.venv-path }}/tox -e build

      - name: "Upload wheel"
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.name }}-${{ matrix.cpython }}-${{ matrix.architecture }}
          path: dist/*.whl


  quality:
    name: "Quality"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v5

      - name: "Set up Python"
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: "Install build prerequisites"
        run: |
          sudo apt install libpcsclite-dev python3-all-dev swig

      - name: "Create a virtual environment"
        run: |
          python -m venv temp
          temp/bin/python -m pip install --upgrade pip setuptools wheel
          temp/bin/pip install tox

      - name: "Perform quality checks: docs"
        run: |
          temp/bin/tox -e docs

      - name: "Perform quality checks: pylint"
        run: |
          temp/bin/tox -e pylint

      - name: "Perform quality checks: pylint_test"
        run: |
          temp/bin/tox -e pylint_test

      - name: "Perform quality checks: pylint_Examples"
        run: |
          temp/bin/tox -e pylint_Examples

      - name: "Perform quality checks: pylint_srctest"
        run: |
          temp/bin/tox -e pylint_srctest

  publish:
    name: "PyPi Publish"
    needs: ["test", "quality"]
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    runs-on: "ubuntu-latest"

    steps:

      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # 5.0.0

      - name: show wheels
        run: |
          mkdir -v dist
          mv -v wheel-*/*.whl dist/
          ls -al dist/
      - name: Publish wheels to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          attestation: true
